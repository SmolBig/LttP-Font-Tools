#include "extract.h"
#include "../shared/shared.h"
#include <algorithm>
#include <fstream>
#include "../shared/ImageCodec.h"

#ifdef _DEBUG
#pragma comment(lib, "../Debug/shared.lib")
#else
#pragma comment(lib, "../Release/shared.lib")
#endif // DEBUG

using namespace Shared;

//provides the destination array index while unpacking a glyph
int swizzleDestIndex(int row, int bit) {
  if     (row < 8)  { return coordsToIndex(bit, row); }
  else if(row < 11) { return coordsToIndex(row, bit); }
  else if(row < 19) { return coordsToIndex(bit, row - 3); }
  else              { return coordsToIndex(row - 19 + 8, bit + 8); }
}

//unpacks a glyph to 2bpp format
void unpack(const ByteArray& packed, byte* dest) {

  //Array of all possible single-byte values in ascending order, but with the bit order reversed and the bits doubled
  constexpr uint16_t reversedExpandedBytes[256] = {
    0b0000000000000000, 0b1100000000000000, 0b0011000000000000, 0b1111000000000000, 0b0000110000000000, 0b1100110000000000, 0b0011110000000000, 0b1111110000000000,
    0b0000001100000000, 0b1100001100000000, 0b0011001100000000, 0b1111001100000000, 0b0000111100000000, 0b1100111100000000, 0b0011111100000000, 0b1111111100000000,
    0b0000000011000000, 0b1100000011000000, 0b0011000011000000, 0b1111000011000000, 0b0000110011000000, 0b1100110011000000, 0b0011110011000000, 0b1111110011000000,
    0b0000001111000000, 0b1100001111000000, 0b0011001111000000, 0b1111001111000000, 0b0000111111000000, 0b1100111111000000, 0b0011111111000000, 0b1111111111000000,
    0b0000000000110000, 0b1100000000110000, 0b0011000000110000, 0b1111000000110000, 0b0000110000110000, 0b1100110000110000, 0b0011110000110000, 0b1111110000110000,
    0b0000001100110000, 0b1100001100110000, 0b0011001100110000, 0b1111001100110000, 0b0000111100110000, 0b1100111100110000, 0b0011111100110000, 0b1111111100110000,
    0b0000000011110000, 0b1100000011110000, 0b0011000011110000, 0b1111000011110000, 0b0000110011110000, 0b1100110011110000, 0b0011110011110000, 0b1111110011110000,
    0b0000001111110000, 0b1100001111110000, 0b0011001111110000, 0b1111001111110000, 0b0000111111110000, 0b1100111111110000, 0b0011111111110000, 0b1111111111110000,
    0b0000000000001100, 0b1100000000001100, 0b0011000000001100, 0b1111000000001100, 0b0000110000001100, 0b1100110000001100, 0b0011110000001100, 0b1111110000001100,
    0b0000001100001100, 0b1100001100001100, 0b0011001100001100, 0b1111001100001100, 0b0000111100001100, 0b1100111100001100, 0b0011111100001100, 0b1111111100001100,
    0b0000000011001100, 0b1100000011001100, 0b0011000011001100, 0b1111000011001100, 0b0000110011001100, 0b1100110011001100, 0b0011110011001100, 0b1111110011001100,
    0b0000001111001100, 0b1100001111001100, 0b0011001111001100, 0b1111001111001100, 0b0000111111001100, 0b1100111111001100, 0b0011111111001100, 0b1111111111001100,
    0b0000000000111100, 0b1100000000111100, 0b0011000000111100, 0b1111000000111100, 0b0000110000111100, 0b1100110000111100, 0b0011110000111100, 0b1111110000111100,
    0b0000001100111100, 0b1100001100111100, 0b0011001100111100, 0b1111001100111100, 0b0000111100111100, 0b1100111100111100, 0b0011111100111100, 0b1111111100111100,
    0b0000000011111100, 0b1100000011111100, 0b0011000011111100, 0b1111000011111100, 0b0000110011111100, 0b1100110011111100, 0b0011110011111100, 0b1111110011111100,
    0b0000001111111100, 0b1100001111111100, 0b0011001111111100, 0b1111001111111100, 0b0000111111111100, 0b1100111111111100, 0b0011111111111100, 0b1111111111111100,
    0b0000000000000011, 0b1100000000000011, 0b0011000000000011, 0b1111000000000011, 0b0000110000000011, 0b1100110000000011, 0b0011110000000011, 0b1111110000000011,
    0b0000001100000011, 0b1100001100000011, 0b0011001100000011, 0b1111001100000011, 0b0000111100000011, 0b1100111100000011, 0b0011111100000011, 0b1111111100000011,
    0b0000000011000011, 0b1100000011000011, 0b0011000011000011, 0b1111000011000011, 0b0000110011000011, 0b1100110011000011, 0b0011110011000011, 0b1111110011000011,
    0b0000001111000011, 0b1100001111000011, 0b0011001111000011, 0b1111001111000011, 0b0000111111000011, 0b1100111111000011, 0b0011111111000011, 0b1111111111000011,
    0b0000000000110011, 0b1100000000110011, 0b0011000000110011, 0b1111000000110011, 0b0000110000110011, 0b1100110000110011, 0b0011110000110011, 0b1111110000110011,
    0b0000001100110011, 0b1100001100110011, 0b0011001100110011, 0b1111001100110011, 0b0000111100110011, 0b1100111100110011, 0b0011111100110011, 0b1111111100110011,
    0b0000000011110011, 0b1100000011110011, 0b0011000011110011, 0b1111000011110011, 0b0000110011110011, 0b1100110011110011, 0b0011110011110011, 0b1111110011110011,
    0b0000001111110011, 0b1100001111110011, 0b0011001111110011, 0b1111001111110011, 0b0000111111110011, 0b1100111111110011, 0b0011111111110011, 0b1111111111110011,
    0b0000000000001111, 0b1100000000001111, 0b0011000000001111, 0b1111000000001111, 0b0000110000001111, 0b1100110000001111, 0b0011110000001111, 0b1111110000001111,
    0b0000001100001111, 0b1100001100001111, 0b0011001100001111, 0b1111001100001111, 0b0000111100001111, 0b1100111100001111, 0b0011111100001111, 0b1111111100001111,
    0b0000000011001111, 0b1100000011001111, 0b0011000011001111, 0b1111000011001111, 0b0000110011001111, 0b1100110011001111, 0b0011110011001111, 0b1111110011001111,
    0b0000001111001111, 0b1100001111001111, 0b0011001111001111, 0b1111001111001111, 0b0000111111001111, 0b1100111111001111, 0b0011111111001111, 0b1111111111001111,
    0b0000000000111111, 0b1100000000111111, 0b0011000000111111, 0b1111000000111111, 0b0000110000111111, 0b1100110000111111, 0b0011110000111111, 0b1111110000111111,
    0b0000001100111111, 0b1100001100111111, 0b0011001100111111, 0b1111001100111111, 0b0000111100111111, 0b1100111100111111, 0b0011111100111111, 0b1111111100111111,
    0b0000000011111111, 0b1100000011111111, 0b0011000011111111, 0b1111000011111111, 0b0000110011111111, 0b1100110011111111, 0b0011110011111111, 0b1111110011111111,
    0b0000001111111111, 0b1100001111111111, 0b0011001111111111, 0b1111001111111111, 0b0000111111111111, 0b1100111111111111, 0b0011111111111111, 0b1111111111111111
  };

  constexpr int NUM_ROWS = TILE_LENGTH / 8;
  for(int row = 0; row < NUM_ROWS; row++) {
    byte low  = packed[row * 2];
    byte high = packed[row * 2 + 1];
    uint16_t reverseInterleaved = (reversedExpandedBytes[low] & 0b0101010101010101) | (reversedExpandedBytes[high] & 0b1010101010101010);

    for(int bit = 0; bit < 8; bit++) {
      int index = swizzleDestIndex(row, bit); //~~@ segregate the swizzle
      dest[index] = (byte)(reverseInterleaved & 0b11);
      reverseInterleaved >>= 2;
    }
  }
}

//Generates a raw bitmap containining all the glyphs from the source data
ByteArray load(ByteArray rawData, uint32_t tileOffset, uint32_t bitmaskOffset) {
  byte* tilePtr = &rawData[tileOffset];
  byte* maskPtr = &rawData[bitmaskOffset];

  ByteArray tiles(TILE_LENGTH * TILE_COUNT);
  byte* outPtr = tiles.data();

  for(int tile = 0; tile < TILE_COUNT; tile++) {
    long long mask = 0;

    for(int i = 0; i < MASK_LENGTH; i++) {
      mask <<= 8;
      mask |= *maskPtr++;
    }

    ByteArray packed(PACKED_TILE_LENGTH, 0);
    for(size_t index = 4; index < packed.size(); index++) {
      if(mask & 0x8000000000) {
        packed[index] = *tilePtr++;
      }
      mask <<= 1;
    }

    unpack(packed, outPtr);
    outPtr += TILE_LENGTH;
  }

  return tiles;
}

void extract(const std::string& baseRomPath, const std::string& outPngPath) {
  auto fileData = loadFile(baseRomPath);
  ByteArray raw = load(fileData, TILES_OFFSET, MASKS_OFFSET);
  auto bmp = tilesheetToTexture(raw);
  ImageCodec::saveToFile(outPngPath, bmp);
}


